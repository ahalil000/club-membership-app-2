{"version":3,"sources":["fetch-data/fetch-data.component.ts"],"names":["core_1","require","http_1","FetchDataComponent","http","baseUrl","_this","this","get","subscribe","result","forecasts","error","console","__decorate","Component","selector","templateUrl","Inject","exports"],"mappings":"kuBAAAA,OAAAC,QAAkC,iBAClCC,OAAAD,QAA2B,wBAM3BE,mBAAA,WAGE,QAAAA,oBAAYC,KAAsCC,SAHpD,GAAAC,OAAAC,IAIIH,MAAKI,IAAuBH,QAAU,mCAAmCI,UAAU,SAAAC,QACjFJ,MAAKK,UAAYD,QAChB,SAAAE,OAAS,MAAAC,SAAQD,MAAMA,SAE9B,MAZAT,oBAAAW,YAACd,OAAAe,WACCC,SAAU,iBACVC,YAAa,0CAKkBjB,OAAAkB,OAAO,+FAH3BC,SAAAhB,mBAAkBA","file":"fetch-data.component.js","sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: WeatherForecast[];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<WeatherForecast[]>(baseUrl + 'api/SampleData/WeatherForecasts').subscribe(result => {\r\n      this.forecasts = result;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\n\r\ninterface WeatherForecast {\r\n  dateFormatted: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n"]}