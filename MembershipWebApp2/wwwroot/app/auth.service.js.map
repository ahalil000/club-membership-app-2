{"version":3,"sources":["auth.service.ts"],"names":["core_1","require","http_1","auth_http_1","AuthService","http","this","authKey","prototype","login","username","password","_this","data","client_id","grant_type","scope","post","toUrlEncodedString","RequestOptions","headers","Headers","Content-Type","map","response","auth","json","console","log","setAuth","logout","body","key","length","encodeURIComponent","localStorage","setItem","JSON","stringify","removeItem","getAuth","i","getItem","parse","isLoggedIn","__decorate","Injectable","exports"],"mappings":"wmBAAAA,OAAAC,QAAuC,iBACvCC,OAAAD,QAAsD,iBAEtDE,YAAAF,QAAuB,eAGvBG,YAAA,WAGI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAFpBC,KAAAC,QAAU,OA+Ed,MA1EIH,aAAAI,UAAAC,MAAA,SAAMC,SAAkBC,UAAxB,GAAAC,OAAAN,KAGQO,MACAH,SAAUA,SACVC,SAAUA,SACVG,UAAW,iBAEXC,WAAY,WAEZC,MAAO,+BAGX,OAAOV,MAAKD,KAAKY,KAZP,oBAcNX,KAAKY,mBAAmBL,MACxB,GAAIX,QAAAiB,gBACAC,QAAS,GAAIlB,QAAAmB,SACTC,eAAgB,yCAGvBC,IAAI,SAAAC,UACD,GAAIC,MAAOD,SAASE,MAIpB,OAHAC,SAAQC,IAAI,qDACZD,QAAQC,IAAIH,MACZb,MAAKiB,QAAQJ,MACNA,QAInBrB,YAAAI,UAAAsB,OAAA,WAEI,MADAxB,MAAKuB,QAAQ,OACN,GAIXzB,YAAAI,UAAAU,mBAAA,SAAmBL,MACf,GAAIkB,MAAO,EACX,KAAK,GAAIC,OAAOnB,MACRkB,KAAKE,SACLF,MAAQ,KAEZA,MAAQC,IAAM,IACdD,MAAQG,mBAAmBrB,KAAKmB,KAEpC,OAAOD,OAIX3B,YAAAI,UAAAqB,QAAA,SAAQJ,MAOJ,MANIA,MACAU,aAAaC,QAAQ9B,KAAKC,QAAS8B,KAAKC,UAAUb,OAGlDU,aAAaI,WAAWjC,KAAKC,UAE1B,GAIXH,YAAAI,UAAAgC,QAAA,WACI,GAAIC,GAAIN,aAAaO,QAAQpC,KAAKC,QAClC,OAAIkC,GACOJ,KAAKM,MAAMF,GAGX,MAKfrC,YAAAI,UAAAoC,WAAA,WACI,MAA6C,OAAtCT,aAAaO,QAAQpC,KAAKC,UA/EzCH,YAAAyC,YAAC7C,OAAA8C,oFACYC,SAAA3C,YAAWA","file":"auth.service.js","sourcesContent":["import {Injectable, EventEmitter} from \"@angular/core\";\nimport {Http, Headers, Response, RequestOptions} from \"@angular/http\";\nimport {Observable} from \"rxjs/Observable\";\nimport {AuthHttp} from \"./auth.http\";\n\n@Injectable()\nexport class AuthService {\n    authKey = \"auth\";\n\n    constructor(private http: AuthHttp) {\n    }\n\n    login(username: string, password: string): any {\n        var url = \"api/connect/token\";  // JwtProvider's LoginPath\n\n        var data = {\n            username: username,\n            password: password,\n            client_id: \"OpenMemberList\",\n            // required when signing up with username/password\n            grant_type: \"password\",\n            // space-separated list of scopes for which the token is issued\n            scope: \"offline_access profile email\"\n        };\n\n        return this.http.post(\n            url,\n            this.toUrlEncodedString(data),\n            new RequestOptions({\n                headers: new Headers({\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                })\n            }))\n            .map(response => {\n                var auth = response.json();\n                console.log(\"The following auth JSON object has been received:\");\n                console.log(auth);\n                this.setAuth(auth);\n                return auth;\n            });\n    }\n\n    logout(): boolean {\n        this.setAuth(null);\n        return true;\n    }\n\n    // Converts a Json object to urlencoded format\n    toUrlEncodedString(data: any) {\n        var body = \"\";\n        for (var key in data) {\n            if (body.length) {\n                body += \"&\";\n            }\n            body += key + \"=\";\n            body += encodeURIComponent(data[key]);\n        }\n        return body;\n    }\n\n    // Persist auth into localStorage or removes it if a NULL argument is given\n    setAuth(auth: any): boolean {\n        if (auth) {\n            localStorage.setItem(this.authKey, JSON.stringify(auth));\n        }\n        else {\n            localStorage.removeItem(this.authKey);\n        }\n        return true;\n    }\n\n    // Retrieves the auth JSON object (or NULL if none)\n    getAuth(): any {\n        var i = localStorage.getItem(this.authKey);\n        if (i) {\n            return JSON.parse(i);\n        }\n        else {\n            return null;\n        }\n    }\n\n    // Returns TRUE if the user is logged in, FALSE otherwise.\n    isLoggedIn(): boolean {\n        return localStorage.getItem(this.authKey) != null;\n    }\n}\n"]}