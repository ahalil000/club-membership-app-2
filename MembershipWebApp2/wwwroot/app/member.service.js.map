{"version":3,"sources":["member.service.ts"],"names":["core_1","require","http_1","Observable_1","auth_http_1","MemberService","http","this","baseUrl","prototype","getList","num","url","get","map","response","json","catch","handleError","id","Error","res","getColumns","add","member","post","JSON","stringify","getRequestOptions","update","ID","put","delete","RequestOptions","headers","Headers","Content-Type","error","console","Observable","throw","__decorate","Injectable","exports"],"mappings":"wmBAAAA,OAAAC,QAAyB,iBACzBC,OAAAD,QAAsD,iBACtDE,aAAAF,QAAyB,mBAEzBG,YAAAH,QAAuB,eAGvBI,cAAA,WACI,QAAAA,eAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,kBA6DtB,MA1DIH,eAAAI,UAAAC,QAAA,SAAQC,KACJ,GAAIC,KAAML,KAAKC,QAAU,OAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,cAAAI,UAAAI,IAAA,SAAIM,IACA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIR,KAAML,KAAKC,QAAUW,EACzB,OAAOZ,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAO,KAAO,MAAQA,KAAIL,SACvBC,MAAMV,KAAKW,cAGpBb,cAAAI,UAAAa,WAAA,WACE,OAAQ,YAAa,WAAY,eAAgB,gBAAiB,kBAIpEjB,cAAAI,UAAAc,IAAA,SAAIC,QACA,GAAIZ,KAAML,KAAKC,OACf,OAAOD,MAAKD,KAAKmB,KAAKb,IAAKc,KAAKC,UAAUH,QAASjB,KAAKqB,qBACnDd,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,cAAAI,UAAAoB,OAAA,SAAOL,QACH,GAAIZ,KAAML,KAAKC,QAAUgB,OAAOM,EAChC,OAAOvB,MAAKD,KAAKyB,IAAInB,IAAKc,KAAKC,UAAUH,QAASjB,KAAKqB,qBAClDd,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,cAAAI,UAAAuB,OAAA,SAAOb,IACH,GAAIP,KAAML,KAAKC,QAAUW,EACzB,OAAOZ,MAAKD,KAAK0B,OAAOpB,IAAK,GAAIV,QAAA+B,gBAC5BhB,MAAMV,KAAKW,cAIZb,cAAAI,UAAAmB,kBAAR,WACI,MAAO,IAAI1B,QAAA+B,gBACPC,QAAS,GAAIhC,QAAAiC,SACTC,eAAgB,wBAKpB/B,cAAAI,UAAAS,YAAR,SAAoBmB,OAGhB,MADAC,SAAQD,MAAMA,OACPlC,aAAAoC,WAAWC,MAAMH,MAAMrB,OAAOqB,OAAS,iBA/DtDhC,cAAAoC,YAACzC,OAAA0C,sFACYC,SAAAtC,cAAaA","file":"member.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Http, Response, Headers, RequestOptions} from \"@angular/http\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Member} from \"./member\";\nimport {AuthHttp} from \"./auth.http\";\n\n@Injectable()\nexport class MemberService {\n    constructor(private http: AuthHttp) { }\n\n    private baseUrl = \"api/MemberData/\";  // web api URL\n\n    // calls the [GET] /api/MemberData/List/{n} Web API method to retrieve member records.\n    getList(num?: number) {\n        var url = this.baseUrl + \"List/\";\n        if (num != null) { url += num; }\n        return this.http.get(url)\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: number) {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + id;\n        return this.http.get(url)\n            .map(res => <Member>res.json())\n            .catch(this.handleError);\n    }\n\n    getColumns(): string[] {\r\n      return [\"FirstName\", \"LastName\", \"EmailAddress\", \"ContactNumber\", \"AccountStatus\"];\r\n    };\n\n    // calls the [POST] /api/items/ Web API method to add a new item.\n    add(member: Member) {\n        var url = this.baseUrl;\n        return this.http.post(url, JSON.stringify(member), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [PUT] /api/items/{id} Web API method to update an existing item.\n    update(member: Member) {\n        var url = this.baseUrl + member.ID;\n        return this.http.put(url, JSON.stringify(member), this.getRequestOptions())\n            .map(response => response.json())\n            .catch(this.handleError);\n    }\n\n    // calls the [DELETE] /api/items/{id} Web API method to delete the item with the given id.\n    delete(id: number) {\n        var url = this.baseUrl + id;\n        return this.http.delete(url, new RequestOptions())\n            .catch(this.handleError);\n    }\n\n    // returns a viable RequestOptions object to handle Json requests\n    private getRequestOptions() {\n        return new RequestOptions({\n            headers: new Headers({\n                \"Content-Type\": \"application/json\"\n            })\n        });\n    }\n\n    private handleError(error: Response) {\n        // output errors to the console.\n        console.error(error);\n        return Observable.throw(error.json().error || \"Server error\");\n    }\n}\n"]}