{"version":3,"sources":["auth.http.ts"],"names":["core_1","require","http_1","AuthHttp","http","this","authKey","prototype","get","url","opts","configureAuth","post","data","put","delete","i","localStorage","getItem","auth","JSON","parse","console","log","access_token","headers","Headers","set","__decorate","Injectable","exports"],"mappings":"wmBAAAA,OAAAC,QAAyB,iBACzBC,OAAAD,QAA4B,iBAG5BE,SAAA,WAII,QAAAA,UAAYC,MAHZC,KAAAD,KAAO,KACPC,KAAAC,QAAU,OAGND,KAAKD,KAAOA,KAoCpB,MAjCID,UAAAI,UAAAC,IAAA,SAAIC,IAAKC,MAEL,WAFK,KAAAA,OAAAA,SACLL,KAAKM,cAAcD,MACZL,KAAKD,KAAKI,IAAIC,IAAKC,OAG9BP,SAAAI,UAAAK,KAAA,SAAKH,IAAKI,KAAMH,MAEZ,WAFY,KAAAA,OAAAA,SACZL,KAAKM,cAAcD,MACZL,KAAKD,KAAKQ,KAAKH,IAAKI,KAAMH,OAGrCP,SAAAI,UAAAO,IAAA,SAAIL,IAAKI,KAAMH,MAEX,WAFW,KAAAA,OAAAA,SACXL,KAAKM,cAAcD,MACZL,KAAKD,KAAKU,IAAIL,IAAKI,KAAMH,OAGpCP,SAAAI,UAAAQ,OAAA,SAAON,IAAKC,MAER,WAFQ,KAAAA,OAAAA,SACRL,KAAKM,cAAcD,MACZL,KAAKD,KAAKW,OAAON,IAAKC,OAGjCP,SAAAI,UAAAI,cAAA,SAAcD,MACV,GAAIM,GAAIC,aAAaC,QAAQb,KAAKC,QAClC,IAAS,MAALU,EAAW,CACX,GAAIG,MAAOC,KAAKC,MAAML,EACtBM,SAAQC,IAAIJ,MACa,MAArBA,KAAKK,eACe,MAAhBd,KAAKe,UACLf,KAAKe,QAAU,GAAIvB,QAAAwB,SAEvBhB,KAAKe,QAAQE,IAAI,gBAAiB,UAAUR,KAAKK,iBAtCjErB,SAAAyB,YAAC5B,OAAA6B,wEACYC,SAAA3B,SAAQA","file":"auth.http.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Headers} from '@angular/http';\n\n@Injectable()\nexport class AuthHttp {\n    http = null;\n    authKey = \"auth\";\n\n    constructor(http: Http) {\n        this.http = http;\n    }\n\n    get(url, opts = {}) {\n        this.configureAuth(opts);\n        return this.http.get(url, opts);\n    }\n\n    post(url, data, opts = {}) {\n        this.configureAuth(opts);\n        return this.http.post(url, data, opts);\n    }\n\n    put(url, data, opts = {}) {\n        this.configureAuth(opts);\n        return this.http.put(url, data, opts);\n    }\n\n    delete(url, opts = {}) {\n        this.configureAuth(opts);\n        return this.http.delete(url, opts);\n    }\n\n    configureAuth(opts: any) {\n        var i = localStorage.getItem(this.authKey);\n        if (i != null) {\n            var auth = JSON.parse(i);\n            console.log(auth);\n            if (auth.access_token != null) {\n                if (opts.headers == null) {\n                    opts.headers = new Headers();\n                }\n                opts.headers.set(\"Authorization\", `Bearer ${auth.access_token}`);\n            }\n        }\n    }\n}\n"]}